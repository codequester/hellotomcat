apiVersion: v1
kind: Template
metadata:
  name: initial-template
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: test-secret
  data:
    username: dGVzdHVzZXIK
    password: dGVzdHB3ZDEyMwo=
  stringData:
    hostname: myapp.mydomain.com
    secret.properties: |-
      property1=valueA
      property2=valueB
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: hellotomcats2i
    name: hellotomcats2i-configmap
  data:
    variable1: value1
    variable2: value2
    sample.xml: |-
      <?xml version="1.0"?>
      <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
      <configuration>
        <property>
          <name>hbase.zookeeper.quorum</name>
          <value>example1,example2,example3</value>
          <description>The directory shared by RegionServers.
          </description>
        </property>
        <property>
          <name>hbase.zookeeper.property.dataDir</name>
          <value>/export/zookeeper</value>
          <description>Property from ZooKeeper's config zoo.cfg.
          The directory where the snapshot is stored.
          </description>
        </property>
        <property>
          <name>hbase.rootdir</name>
          <value>hdfs://example0:8020/hbase</value>
          <description>The directory shared by RegionServers.</description>
        </property>
        <property>
          <name>hbase.cluster.distributed</name>
          <value>true</value>
          <description>The mode the cluster will be in. Possible values are
            false - tandalone and pseudo-distributed setups with managed Zookeeper
            true - fully-distributed with unmanaged Zookeeper Quorum (see hbase-env.sh)
          </description>
        </property>
      </configuration>
- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      app: hellotomcats2i
    name: hellotomcats2i
  spec:
    lookupPolicy:
      local: false
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: hellotomcats2i
    name: hellotomcats2i
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: hellotomcats2i:latest
    resources: {}
    runPolicy: Serial
    source:
      git:
        uri: https://github.com/codequester/hellotomcat.git
      type: Git
    strategy:
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.2
          namespace: openshift
      type: Source
    triggers:
    - github:
        secret: githubsecret123
      type: GitHub
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    generation: 1
    labels:
      app: hellotomcats2i
    name: hellotomcats2i
  spec:
    replicas: 1
    selector:
      app: hellotomcats2i
      deploymentconfig: hellotomcats2i
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          app: hellotomcats2i
          deploymentconfig: hellotomcats2i
      spec:
        containers:
        - image: hellotomcats2i:latest
          imagePullPolicy: Always
          name: hellotomcats2i
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          volumeMounts:
          # name must match the volume name below
            - name: secret-volume
              mountPath: /etc/secret-volume
              readOnly: true
            - name: xml-config
              mountPath: /etc/conf
          env:
          - name: ENV_VAR_1
            valueFrom:
              configMapKeyRef:
                name: hellotomcats2i-configmap
                key: variable1
          - name: ENV_VAR_2
            valueFrom:
              configMapKeyRef:
                name: hellotomcats2i-configmap
                key: variable2
          - name: DB_URL
            value: jdbc:mysql://${DATABASE_SERVICE_NAME}:3306/${MYSQL_DATABASE}?useSSL=false
          - name: DB_USER
            value: ${MYSQL_USER}
          - name: DB_PWD
            value: ${MYSQL_PASSWORD}
        volumes:
          - name: secret-volume
            secret:
              secretName: test-secret
          - name: xml-config
            configMap: 
              name: hellotomcats2i-configmap
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - hellotomcats2i
        from:
          kind: ImageStreamTag
          name: hellotomcats2i:latest
          namespace: ref-impl
      type: ImageChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: hellotomcats2i
    name: hellotomcats2i
  spec:
    ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: hellotomcats2i
      deploymentconfig: hellotomcats2i
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: hellotomcats2i
    name: hellotomcats2i-route
  spec:
    host: hellotomcats2i-ref-impl.apps.na39.openshift.opentlc.com
    port:
      targetPort: 8080-tcp
    to:
      kind: Service
      name: hellotomcats2i
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      app: hellotomcats2i
    annotations:
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-root_password: '{.data[''database-root-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: ${DATABASE_SERVICE_NAME}
  stringData:
    database-name: ${MYSQL_DATABASE}
    database-password: ${MYSQL_PASSWORD}
    database-root-password: ${MYSQL_ROOT_PASSWORD}
    database-user: ${MYSQL_USER}
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: hellotomcats2i
    annotations:
      template.openshift.io/expose-uri: mysql://{.spec.clusterIP}:{.spec.ports[?(.name=="mysql")].port}
    name: ${DATABASE_SERVICE_NAME}
  spec:
    ports:
    - name: mysql
      port: 3306
    selector:
      name: ${DATABASE_SERVICE_NAME}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: hellotomcats2i
    name: ${DATABASE_SERVICE_NAME}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: hellotomcats2i
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    name: ${DATABASE_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: ${DATABASE_SERVICE_NAME}
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: ${DATABASE_SERVICE_NAME}
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1 -u $MYSQL_USER -D $MYSQL_DATABASE
                -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql/data
            name: ${DATABASE_SERVICE_NAME}-data
        volumes:
        - name: ${DATABASE_SERVICE_NAME}-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          name: mysql:${MYSQL_VERSION}
          namespace: ${NAMESPACE}
      type: ImageChange
    - type: ConfigChange
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The OpenShift Namespace where the ImageStream resides.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Database Service Name
  name: DATABASE_SERVICE_NAME
  required: true
  value: mysql
- description: Username for MySQL user that will be used for accessing the database.
  displayName: MySQL Connection Username
  from: user[A-Z0-9]{3}
  generate: expression
  name: MYSQL_USER
  required: true
- description: Password for the MySQL connection user.
  displayName: MySQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_PASSWORD
  required: true
- description: Password for the MySQL root user.
  displayName: MySQL root user Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: MYSQL_ROOT_PASSWORD
  required: true
- description: Name of the MySQL database accessed.
  displayName: MySQL Database Name
  name: MYSQL_DATABASE
  required: true
  value: sampledb
- description: Volume space available for data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Version of MySQL image to be used (5.5, 5.6, 5.7, or latest).
  displayName: Version of MySQL Image
  name: MYSQL_VERSION
  required: true
  value: "5.7"
